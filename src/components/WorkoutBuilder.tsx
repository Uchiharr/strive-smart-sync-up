
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Plus, X, Dumbbell, Brain } from 'lucide-react';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

interface Exercise {
  name: string;
  sets?: string;
  reps?: string;
  duration?: string;
  instructions?: string;
}

interface WorkoutBuilderProps {
  isOpen: boolean;
  onClose: () => void;
  isAiGenerated?: boolean;
  clientId?: string;
}

const WorkoutBuilder: React.FC<WorkoutBuilderProps> = ({ isOpen, onClose, isAiGenerated = false, clientId }) => {
  const { user } = useAuth();
  const [workoutName, setWorkoutName] = useState('');
  const [description, setDescription] = useState('');
  const [difficulty, setDifficulty] = useState('');
  const [exercises, setExercises] = useState<Exercise[]>([{ name: '', sets: '', reps: '' }]);
  const [isTemplate, setIsTemplate] = useState(!clientId);
  const [loading, setLoading] = useState(false);

  const addExercise = () => {
    setExercises([...exercises, { name: '', sets: '', reps: '' }]);
  };

  const removeExercise = (index: number) => {
    setExercises(exercises.filter((_, i) => i !== index));
  };

  const updateExercise = (index: number, field: keyof Exercise, value: string) => {
    const updated = exercises.map((exercise, i) => 
      i === index ? { ...exercise, [field]: value } : exercise
    );
    setExercises(updated);
  };

  const generateAIWorkout = async () => {
    setLoading(true);
    try {
      // Simulate AI generation for now
      const aiExercises = [
        { name: 'Push-ups', sets: '3', reps: '12-15', instructions: 'Keep your core tight and body straight' },
        { name: 'Squats', sets: '3', reps: '15-20', instructions: 'Keep your chest up and knees behind toes' },
        { name: 'Plank', duration: '30-60 seconds', instructions: 'Hold position with straight line from head to heels' },
        { name: 'Jumping Jacks', sets: '3', reps: '20', instructions: 'Land softly on balls of feet' }
      ];
      
      setExercises(aiExercises);
      setWorkoutName('AI Generated HIIT Workout');
      setDescription('A balanced full-body workout generated by AI based on your fitness goals');
      setDifficulty('intermediate');
      
      toast.success('AI workout generated successfully!');
    } catch (error) {
      toast.error('Failed to generate AI workout');
    } finally {
      setLoading(false);
    }
  };

  const saveWorkout = async () => {
    if (!workoutName.trim() || exercises.length === 0) {
      toast.error('Please provide a workout name and at least one exercise');
      return;
    }

    setLoading(true);
    try {
      const workoutData = {
        name: workoutName,
        description,
        difficulty_level: difficulty,
        exercises: JSON.stringify(exercises),
        trainer_id: user?.id,
        client_id: clientId || null,
        is_template: isTemplate
      };

      const { error } = await supabase
        .from('workout_programs')
        .insert(workoutData);

      if (error) throw error;

      toast.success(`Workout ${isTemplate ? 'template' : 'program'} created successfully!`);
      onClose();
      
      // Reset form
      setWorkoutName('');
      setDescription('');
      setDifficulty('');
      setExercises([{ name: '', sets: '', reps: '' }]);
    } catch (error) {
      console.error('Error saving workout:', error);
      toast.error('Failed to save workout');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Dumbbell className="w-5 h-5" />
            {isAiGenerated ? 'AI Workout Generator' : 'Create Workout Program'}
          </DialogTitle>
          <DialogDescription>
            {isAiGenerated ? 'Generate a personalized workout using AI' : 'Build a custom workout program for your clients'}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {isAiGenerated && (
            <div className="flex justify-center">
              <Button 
                onClick={generateAIWorkout}
                disabled={loading}
                className="bg-gradient-to-r from-purple-600 to-pink-600"
              >
                <Brain className="w-4 h-4 mr-2" />
                {loading ? 'Generating...' : 'Generate AI Workout'}
              </Button>
            </div>
          )}

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Workout Name</label>
              <Input
                value={workoutName}
                onChange={(e) => setWorkoutName(e.target.value)}
                placeholder="e.g., Upper Body Strength"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Difficulty Level</label>
              <Select value={difficulty} onValueChange={setDifficulty}>
                <SelectTrigger>
                  <SelectValue placeholder="Select difficulty" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="beginner">Beginner</SelectItem>
                  <SelectItem value="intermediate">Intermediate</SelectItem>
                  <SelectItem value="advanced">Advanced</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">Description</label>
            <Textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Describe the workout goals and focus areas..."
              rows={3}
            />
          </div>

          <div>
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Exercises</h3>
              <Button onClick={addExercise} size="sm">
                <Plus className="w-4 h-4 mr-2" />
                Add Exercise
              </Button>
            </div>

            <div className="space-y-4">
              {exercises.map((exercise, index) => (
                <Card key={index}>
                  <CardContent className="p-4">
                    <div className="flex items-start gap-4">
                      <div className="flex-1 grid grid-cols-2 gap-4">
                        <Input
                          placeholder="Exercise name"
                          value={exercise.name}
                          onChange={(e) => updateExercise(index, 'name', e.target.value)}
                        />
                        <Input
                          placeholder="Sets (e.g., 3)"
                          value={exercise.sets || ''}
                          onChange={(e) => updateExercise(index, 'sets', e.target.value)}
                        />
                        <Input
                          placeholder="Reps (e.g., 12-15)"
                          value={exercise.reps || ''}
                          onChange={(e) => updateExercise(index, 'reps', e.target.value)}
                        />
                        <Input
                          placeholder="Duration (e.g., 30 seconds)"
                          value={exercise.duration || ''}
                          onChange={(e) => updateExercise(index, 'duration', e.target.value)}
                        />
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => removeExercise(index)}
                        disabled={exercises.length === 1}
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    </div>
                    <div className="mt-2">
                      <Input
                        placeholder="Instructions (optional)"
                        value={exercise.instructions || ''}
                        onChange={(e) => updateExercise(index, 'instructions', e.target.value)}
                      />
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          <div className="flex justify-between">
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                id="isTemplate"
                checked={isTemplate}
                onChange={(e) => setIsTemplate(e.target.checked)}
                disabled={!!clientId}
              />
              <label htmlFor="isTemplate" className="text-sm">
                Save as template (reusable)
              </label>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={onClose}>Cancel</Button>
              <Button onClick={saveWorkout} disabled={loading}>
                {loading ? 'Saving...' : 'Save Workout'}
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default WorkoutBuilder;
